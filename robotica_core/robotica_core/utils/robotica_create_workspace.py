import os
import argparse
import subprocess

def generate_setup_file(ws_name):
    return f'''
from setuptools import setup, find_packages

setup(
    name='{ws_name}',
    version='0.1.0',
    packages=find_packages(),
    install_requires=[
        "robotica_plugins",
        "robotica_datatypes",
    ],
    author='Your Name',
    author_email='your.email@example.com',
    description='Description of your package',
    license='Your License',
)

'''

def build_plugins_script():
    return f'''
#############################################
# DO NOT EDIT THIS FILE
#
# This file is auto-generated and is used to
# build the plugins developed in this package. 
##############################################

import os
from robotica_plugins.utils.build_plugins import build_plugins

# Build Plugins
script_directory = os.path.dirname(os.path.abspath(__file__))
build_plugins(script_directory)

'''

def init_definition_file(plugin_type):
    return f'''
#############################################
# DO NOT EDIT THIS FILE
#
# This file is auto-generated and is used to
# load the plugins developed in this package. 
##############################################

{plugin_type} = {{}}
'''

def robot_interface_file():
    return f'''
from robotica_plugins.utils.robot_api import RobotAPI
from plugins.kinematics.definition import Kinematics_Plugins
from plugins.trajectory_planners.definition import Trajectory_Planners_Plugins
from plugins.path_planners.definition import Path_Planners_Plugins

class RobotInterface:
    def __init__(self, robot_yml_file, env_yml_file=None):
        self.api = RobotAPI(
            robot_yml_file, 
            env_yml_file,
            kinematics_plugins = Kinematics_Plugins, 
            cartesian_traj_plugins = Trajectory_Planners_Plugins,
            path_planner_plugins = Path_Planners_Plugins,
        )

    #############################
    # Robot Application Interface
    #############################
        
    def plan_and_execute(self, goal):
        self.api.plan_and_execute(goal)

    def execute_path(self, path):
        self.api.execute_path(path)
    
    def joint_move(self, joint_trajectory):
        self.api.joint_move(joint_trajectory)
    
    def get_curr_joint_pos(self):
        return self.api.get_current_joint_positions()
    
    def get_curr_ee_pos(self):
        pass
    
    ######################
    # Robot Core Interface
    ######################
        
    def inverse_kinematics(self, point, cfg=0):
        return self.api.kinematics.inverse_kinematics(point, cfg)
    
    def forward_kinematics(self, joints):
        return self.api.kinematics.forward_kinematics(joints)
    
    def plan(self, start, goal):
        return self.api.path_planner.plan(start, goal)
'''

def gen_example_robot_yml():
    return f'''
robot_name: "example_2_link_robot"
dh_params:
  theta: [1.3,-0.9]
  a: [0.3, 0.25]
  d: [0.0, 0.0]
  alpha: [0.0, 0.0]
joint_limits:
  j1:
    position:
      min: -2.44
      max: 2.44
    velocity:
      min: 1
      max: 2
  j2:
    position:
      min: -2.5
      max: 2.5
    velocity:
      min: 1
      max: 3
'''

def gen_example_env_yml():
    return f'''
objects:
  obj_1:
    type: "rectangle"
    pose:
      x: -0.5
      y: 0.5
    size:
      x: 0.15
      y: 0.15
  obj_2:
    type: "rectangle"
    pose:
      x: 0.5
      y: 0.5
    size:
      x: 0.15
      y: 0.15
'''

def create_ws(ws_dict, root_path):
    os.makedirs(root_path)
    files = ws_dict['files']

    for file_name, file_content in files.items():
        file_path = os.path.join(root_path, file_name)
        with open(file_path, 'w') as file:
            file.write(file_content)

    for dir_name, dir_content in ws_dict['dirs'].items():
        dir_path = os.path.join(root_path, dir_name)
        create_ws(dir_content, dir_path)


def create_robotica_ws():
    parser = argparse.ArgumentParser(description='Create a robotica workspace')
    parser.add_argument('--ws-name', required=True, help='Workspace name')
    args = parser.parse_args()

    ws_name = args.ws_name

    setup_file = generate_setup_file(ws_name)
    ws = {
        'dirs':{
            'plugins':{
                'dirs':{
                    'kinematics':{
                        'dirs':{
                            'plugins':{
                                'dirs':{},
                                'files':{
                                    '__init__.py': '',
                                }
                            },
                        },
                        'files':{
                            '__init__.py': '',
                            'definition.py':init_definition_file('Kinematics_Plugins'),
                        }
                    },
                    'path_planners':{
                        'dirs':{
                            'plugins':{
                                'dirs':{},
                                'files':{
                                    '__init__.py': '',
                                }
                            },
                        },
                        'files':{
                            '__init__.py': '',
                            'definition.py':init_definition_file('Path_Planners_Plugins'),
                        }
                    },
                    'trajectory_planners':{
                        'dirs':{
                            'plugins':{
                                'dirs':{},
                                'files':{
                                    '__init__.py': '',
                                }
                            },
                        },
                        'files':{
                            '__init__.py': '',
                            'definition.py':init_definition_file('Trajectory_Planners_Plugins'),
                        }
                    },
                },
                'files':{
                    '__init__.py': '',
                }
            },
            'robots':{
                'dirs':{},
                'files':{
                    '__init__.py': '',
                    'example_robot.yml': gen_example_robot_yml(),
                }
            },
            'environments':{
                'dirs':{},
                'files':{
                    '__init__.py': '',
                    'example_env.yml': gen_example_env_yml(),
                }
            },
            'scripts':{
                'dirs':{},
                'files':{
                    '__init__.py': '',
                    'robot_interface.py': robot_interface_file(),
                }
            },
        },
        'files': {
            'README.md': '# My Workspace\n\nThis is a sample workspace.',
            'robotica_ws.txt': f'workspace:={ws_name}',
            '__init__.py': '',
            'setup.py': setup_file,
            'build_plugins.py': build_plugins_script(),
        }
    }
    create_ws(ws, ws_name)
    curr_path = os.getcwd()
    ws_path = os.path.join(curr_path, ws_name)
    os.chdir(ws_path)
    subprocess.run(['pip', 'install', '-e', '.'])


if __name__ == "__main__":
    # Define workspace details
    create_robotica_ws()